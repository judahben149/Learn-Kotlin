<resources>
    <string name="app_name">Learn Kotlin</string>
    <!-- TODO: Remove or change this placeholder text -->
    <string name="hello_blank_fragment">Hello blank fragment</string>
    <string name="home_fragment">Home Fragment</string>
    <string name="profile_fragment">Profile Fragment</string>
    <string name="favorites_fragment">Favorites Fragment</string>
    <string name="home">Home</string>
    <string name="favorites">Favorites</string>
    <string name="profile">Profile</string>
    <string name="email_or_phone_number">Email or Phone number</string>
    <string name="already_have_an_account">Already have an account?</string>
    <string name="sign_in">Sign In</string>
    <string name="sign_up">Sign up</string>
    <string name="confirm_password">Confirm password</string>
    <string name="create_password">Create password</string>
    <string name="full_name">Full Name</string>
    <string name="study_from_the_comfort_of_your_home">Study from the comfort of your home…</string>
    <string name="learn_kotlin_with_ease">Learn Kotlin with ease…</string>
    <string name="password">Password</string>
    <string name="forgot_password">Forgot password?</string>
    <string name="login">Login</string>
    <string name="or_continue_with">or continue with</string>
    <string name="google">Google</string>
    <string name="don_t_have_an_account">Don\'t have an account?</string>
    <string name="move_from_zero_to_hero_in_no_time">Move from zero to hero in no time!</string>
    <string name="continue_to_app">Continue to app</string>
    <string name="modules">Modules</string>
    <string name="modules_fragment">Modules Fragment</string>
    <string name="module_1">Module 1</string>


    <string name="module1_content">What is Kotlin?
Kotlin is a modern, trending programming language that was released in 2016 by &lt;i>JetBrains&lt;/i>.

\nIt has become very popular since it is compatible with Java (one of the most popular programming languages out there), which means that Java code (and libraries) can be used in Kotlin programs.

\nKotlin is used for:

\n*Mobile applications (specially Android apps)
\n*Web development
\n*Server side applications
\n*Data science
\n*And much, much more!</string>


    <string name="module2_content">Kotlin IDE
The easiest way to get started with Kotlin, is to use an IDE.

An IDE (Integrated Development Environment) is used to edit and compile code.

In this chapter, we will use IntelliJ (developed by the same people that created Kotlin) which is free to download from https://www.jetbrains.com/idea/download/.</string>


    <string name="module3_content">Kotlin Syntax
In the previous chapter, we created a Kotlin file called Main.kt, and we used the following code to print "Hello World" to the screen:</string>


    <string name="module4_content">Kotlin Output (Print)
The println() function is used to output values/print text:</string>


    <string name="module5_content">Kotlin Comments
Comments can be used to explain Kotlin code, and to make it more readable. It can also be used to prevent execution when testing alternative code.</string>


    <string name="module6_content">Kotlin Variables
Variables are containers for storing data values.

To create a variable, use var or val, and assign a value to it with the equal sign (=):</string>


    <string name="module7_content">Kotlin Data Types
In Kotlin, the type of a variable is decided by its value:</string>


    <string name="module8_content">Kotlin Operators
Operators are used to perform operations on variables and values.

The value is called an operand, while the operation (to be performed between the two operands) is defined by an operator:</string>


    <string name="module9_content">Kotlin Strings
Strings are used for storing text.

A string contains a collection of characters surrounded by double quotes:</string>


    <string name="module10_content">Kotlin Booleans
Very often, in programming, you will need a data type that can only have one of two values, like:

YES / NO
ON / OFF
TRUE / FALSE
For this, Kotlin has a Boolean data type, which can take the values true or false.</string>


    <string name="module11_content">Kotlin Conditions and If..Else
Kotlin supports the usual logical conditions from mathematics:

Greater than: a > b
Greater than or equal to: a >= b
Equal to a == b
Not Equal to: a != b
You can use these conditions to perform different actions for different decisions.</string>


    <string name="module12_content">Kotlin when
Instead of writing many if..else expressions, you can use the when expression, which is much easier to read.

It is used to select one of many code blocks to be executed:</string>


    <string name="module13_content">Loops
Loops can execute a block of code as long as a specified condition is reached.

Loops are handy because they save time, reduce errors, and they make code more readable.</string>


    <string name="module14_content">Kotlin Break
The break statement is used to jump out of a loop.

This example jumps out of the loop when i is equal to 4:</string>


    <string name="module15_content">Kotlin Arrays
Arrays are used to store multiple values in a single variable, instead of creating separate variables for each value.

To create an array, use the arrayOf() function, and place the values in a comma-separated list inside it:</string>


    <string name="module16_content">Kotlin For Loop
Often when you work with arrays, you need to loop through all of the elements.

To loop through array elements, use the for loop together with the in operator:</string>


    <string name="module17_content">Kotlin Ranges
With the for loop, you can also create ranges of values with "..":</string>


    <string name="module18_content">A function is a block of code which only runs when it is called.

You can pass data, known as parameters, into a function.

Functions are used to perform certain actions, and they are also known as methods.

</string>


    <string name="module19_content">Kotlin - What is OOP?
OOP stands for Object-Oriented Programming.

Procedural programming is about writing procedures or methods that perform operations on the data, while object-oriented programming is about creating objects that contain both data and methods.

Object-oriented programming has several advantages over procedural programming:

OOP is faster and easier to execute
OOP provides a clear structure for the programs
OOP helps to keep the Kotlin code DRY "Don't Repeat Yourself", and makes the code easier to maintain, modify and debug
OOP makes it possible to create full reusable applications with less code and shorter development time
Tip: The "Don't Repeat Yourself" (DRY) principle is about reducing the repetition of code. You should extract out the codes that are common for the application, and place them at a single place and reuse them instead of repeating it.</string>


    <string name="module20_content">Kotlin Classes/Objects
Everything in Kotlin is associated with classes and objects, along with its properties and functions. For example: in real life, a car is an object. The car has properties, such as brand, weight and color, and functions, such as drive and brake.

A Class is like an object constructor, or a "blueprint" for creating objects.</string>


    <string name="module21_content">Kotlin Constructor
In the previous chapter, we created an object of a class, and specified the properties inside the class, like this:</string>
    <string name="settings">Settings</string>
    <string name="about">About</string>
    <string name="sign_out">Sign out</string>

</resources>